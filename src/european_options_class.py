# -*- coding: utf-8 -*-
"""Copy of european_options_class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FljNv_3z3SOaI61Lt8_5XF6fFiskB5CO

Payoff of European call with 
strike $K$ and exercise price $S$ is given as
$$C(S, K)= (S - K)^+ = \max\{S- K, 0\}.$$
Similarly European put with 
strike $K$ and exercise price $S$ is given as
$$P(S, K)= (S - K)^- = \max\{-S+ K, 0\}.$$

Next, we create call/put class
"""

import numpy as np
import matplotlib.pyplot as plt

'''=========
option class init
=========='''
class EuropeanOption:
    def __init__(self,
                otype = 1, # 1: 'call'
                            # -1: 'put'
                strike = 110.,
                maturity = 1.
                ):
        self.otype = otype
        self.strike = strike
        self.maturity = maturity
        
    def payoff(self, s): #s: excercise price
        otype = self.otype
        k = self.strike
        maturity = self.maturity
        return np.max([0, (s - k)*otype])

"""__Test__

We will use a few examples to test the above class.

__ex__

plot payoff diagram of 40-strike call as a function of exercise price.
"""

#create option instance, maturity is just arbitrarily given
option1 = EuropeanOption(otype = 1, strike = 40, maturity= 1.) 
ss = np.arange(20,61) #exercise price
payoff = [option1.payoff(s) for s in ss] #compute payoff
plt.plot(ss, payoff)
plt.xlabel('exercise price')
plt.ylabel('payoff')
plt.title('40-strike call');



